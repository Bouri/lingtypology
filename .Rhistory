paste(check[1:(length(check)-1)])
paste(check[1:(length(check)-1)], collapse = " ")
lang <- NA
iso <- NA
for (i in 1:8284) {
check <- unlist(strsplit(df$language[i], " "))
check <- check[check != ""]
iso[i] <- check[length(check)]
lang[i] <- paste(check[1:(length(check)-1)], collapse = " ")
}
df$lang <- lang
df$iso <- iso
write.csv2(df, "glottolog.csv", row.names = F)
df <- df[,-1]
View(df)
write.csv2(df, "glottolog.csv", row.names = F)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
colnames(df)[3] <- "affiliation"
write.csv2(df, "glottolog.csv", row.names = F)
lang <- read.csv("lff.txt", header = F, stringsAsFactors = F, sep = ";")
lang$language <- grepl("\\[", lang$V1)
lang$discription <- NA
i <- 2
while(i < 5143){
if (lang$language[i] == T) {
j <- i-1
while(lang$language[j] == T){
j <- j - 1
}
lang$discription[i] <- lang$V1[j]
i <- i + 1
} else{i <- i + 1}
}
lang <- lang[lang$language == T,]
lang <- lang[, -2]
View(lang)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
lang <- read.csv("lff.txt", header = F, stringsAsFactors = F, sep = ";")
lang$language <- grepl("\\[", lang$V1)
lang$discription <- NA
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
lang <- read.csv("lff.txt", header = F, stringsAsFactors = F, sep = ";")
lang$language <- grepl("\\[", lang$V1)
lang$discription <- NA
i <- 2
langtest <- lang[1:100,]
lang$language[i] == T
if(langtest$language[i] == F){
j <- i+1
while(langtest$language[j] == T){
langtest$discription[j] <- langtest$V1[i]
j <- j+1}
i <- j
}
View(langtest)
langtest$language[i] == F
i <- 1
if(langtest$language[i] == F){
j <- i+1
while(langtest$language[j] == T){
langtest$discription[j] <- langtest$V1[i]
j <- j+1}
i <- j
}
View(langtest)
langtest <- lang[1:100,]
i <- 3
if(langtest$language[i] == F){
j <- i+1
while(langtest$language[j] == T){
langtest$discription[j] <- langtest$V1[i]
j <- j+1}
i <- j
}
View(langtest)
i <- 1
if(langtest$language[i] == F){
j <- i+1
while(langtest$language[j] == T){
langtest$discription[j] <- langtest$V1[i]
j <- j+1}
i <- j
}
View(langtest)
which(langtest$language == F)
for (i in which(langtest$language == F)) {
if(langtest$language[i] == F){
j <- i+1
while(langtest$language[j] == T){
langtest$discription[j] <- langtest$V1[i]
j <- j+1}
}}
View(langtest)
View(lang)
i <- 1
for (i in which(lang$language == F)) {
if(lang$language[i] == F){
j <- i+1
while(lang$language[j] == T){
lang$discription[j] <- lang$V1[i]
j <- j+1}
}}
View(lang)
lang <- lang[lang$language == T,]
lang <- lang[, -2]
lango <- read.csv("lof.txt", header = F, stringsAsFactors = F, sep = ";", quote = "")
lango$language <- grepl("\\[", lango$V1)
i  <-  1
lango$discription <- NA
for (i in which(lang$language == F)) {
if(lang$language[i] == F){
j <- i+1
while(lang$language[j] == T){
lang$discription[j] <- lang$V1[i]
j <- j+1}
}}
i <- 1
for (i in which(lang$language == F)) {
if(lang$language[i] == F){
j <- i+1
while(lang$language[j] == T){
lang$discription[j] <- lang$V1[i]
j <- j+1}
}}
View(lango)
lang <- read.csv("lff.txt", header = F, stringsAsFactors = F, sep = ";")
lang$language <- grepl("\\[", lang$V1)
lang$discription <- NA
i <- 1
for (i in which(lang$language == F)) {
if(lang$language[i] == F){
j <- i+1
while(lang$language[j] == T){
lang$discription[j] <- lang$V1[i]
j <- j+1}
}}
lang <- lang[lang$language == T,]
lang <- lang[, -2]
lango <- read.csv("lof.txt", header = F, stringsAsFactors = F, sep = ";", quote = "")
lango$language <- grepl("\\[", lango$V1)
i  <-  1
lango$discription <- NA
i <- 1
for (i in which(lango$language == F)) {
if(lango$language[i] == F){
j <- i+1
while(lango$language[j] == T){
lango$discription[j] <- lango$V1[i]
j <- j+1}
}}
lango <- lango[lango$language == T,]
lango <- lango[, -2]
colnames(lang)[1] <- "language"
colnames(lango)[1] <- "language"
langall <- rbind.data.frame(lang, lango)
View(langall)
write.csv2(langall, "glottolog.csv", row.names = F)
df <- read.csv("glottolog.csv", stringsAsFactors = F, sep = ";")
lang <- NA
iso <- NA
df <- read.csv("glottolog.csv", stringsAsFactors = F, sep = ";")
lang <- NA
iso <- NA
i <- 1
for (i in 1:8284) {
check <- unlist(strsplit(df$language[i], " "))
check <- check[check != ""]
iso[i] <- check[length(check)]
lang[i] <- paste(check[1:(length(check)-1)], collapse = " ")
}
df$lang <- lang
df$iso <- iso
df <- df[,-1]
colnames(df)[3] <- "affiliation"
write.csv2(df, "glottolog.csv", row.names = F)
View(df)
write.csv2(df, "glottolog.csv", row.names = F)
df2 <- read.csv("lginfo.csv", stringsAsFactors = F)
colnames(df2)[1] <- "iso"
dfall <- merge(df, df2, by = "iso", all = TRUE)
read.csv2("glottolog.csv", stringsAsFactors = F)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
df2 <- read.csv("lginfo.csv", stringsAsFactors = F)
colnames(df2)[1] <- "iso"
dfall <- merge(df, df2, by = "iso", all = TRUE)
View(df)
df <- read.csv2("glottolog.csv", stringsAsFactors = F, sep = "\t")
dfall <- merge(df, df2, by = "iso", all = TRUE)
dfall2 <- dfall[complete.cases(dfall$lang),]
dfall2 <- dfall2[,-7]
View(dfall2)
write.csv2(dfall2, "glottolog.csv", row.names = F)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
countrydf <- read.csv("forkel_countries.tab", stringsAsFactors = F, sep = "\t", header = F)
countrydf <- countrydf[, 1:2]
colnames(countrydf) <- c("iso", "countries")
country <- merge(df, countrydf, by = "iso", all = TRUE)
write.csv2(country, "glottolog.csv", row.names = F)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
devtools::use_data(glottolog, glottolog)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
devtools::use_data(glottolog, glottolog)
devtools::use_data(glottolog, glottolog, overwrite = T)
library(lingtypology)
iso.lang("Russian")
iso.lang("Adyge")
iso.lang("Adyghe")
iso.lang("Adyge")
library(stringdist)
library(stringdist)
input <- "Adyge"
candidates <- glottolog$lang[stringdist(input, glottolog$lang,method="lv") < 4]
candidates
candidates <- glottolog$lang[stringdist(input, glottolog$lang,method="lv") < 3]
candidates
candidates <- glottolog$lang[stringdist(input, glottolog$lang,method="lv") < 2]
candidates
candidates <- complete.cases(glottolog$lang[stringdist(input, glottolog$lang,method="lv") < 2])
candidates
candidates <- glottolog$lang[stringdist(input, glottolog$lang,method="lv") < 2]
candidates <- candidates[complete.cases(candidates)]
candidates
candidates <- paste(candidates[complete.cases(candidates)], collapse = "? ")
candidates
candidates <- paste(candidates[complete.cases(candidates)], collapse = " or ")
candidates
candidates <- paste(candidates[complete.cases(candidates)], collapse = " or ")
candidates
paste(candidates[complete.cases(candidates)], collapse = " or ")
candidates <- glottolog$lang[stringdist(input, glottolog$lang,method="lv") < 2]
candidates <- paste(candidates[complete.cases(candidates)], collapse = " or ")
candidates
s1 <- "There is no such a languoid in the database."
s1 <- "There is no such a languoid in the database. Did you mean "
paste(s1, candidates, s2)
s2 <- "?"
paste(s1, candidates, s2)
paste(s1, candidates, s2, collapse = "")
s1 <- "Did you mean "
s2 <- "?"
paste(s1, candidates, s2, collapse = "")
paste(s1, candidates, s2, sep = "")
stringdist
library(lingtypology)
library(lingtypology)
iso.lang("Adyghe")
iso.lang("Adyge")
candidates <- glottolog$lang[stringdist::stringdist(input, glottolog$lang,method="lv") < 2]
candidates <- paste(candidates[complete.cases(candidates)], collapse = " or ")
print(paste("Did you mean", candidates, "?", sep = ""))
candidates <- glottolog$lang[stringdist::stringdist(input, glottolog$lang,method="lv") < 2]
candidates <- paste(candidates[complete.cases(candidates)], collapse = " or ")
print(paste("Did you mean ", candidates, "?", sep = ""))
library(lingtypology)
iso.lang("Adyge")
iso.lang("Adyghe")
iso.lang("Adyge")
library(lingtypology)
library(lingtypology)
detach("package:stringdist", unload=TRUE)
iso.lang("Adyghe")
iso.lang(c("Adyghe", "russian"))
iso.lang(c("Adyghe", "rusian"))
library(lingtypology)
iso.lang(c("Adyghe", "rusian"))
input <- "Adyghe"
for (i in 1:length(input)) {
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$iso)
}
input <- "adyghe"
a <- NA
for (i in 1:length(input)) {
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$iso)
}
a
input <- c("adyghe", "russian")
for (i in 1:length(input)) {
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$iso)
}
a <- NA
for (i in 1:length(input)) {
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$iso)
}
a
library(lingtypology)
iso.lang("Adyghe")
iso.lang("Adyge")
iso.lang(c("Adyghe", "Rus"))
iso.lang("Adyghe")
iso.lang(c("Adyghe", "Rus"))
library(lingtypology)
iso.lang(c("Adyghe", "Rus"))
iso.lang(c("Rus"))
library(lingtypology)
glottolog$iso[1]
library(lingtypology)
glottolog$affiliation[1]
library(lingtypology)
aff.lang("Russian")
aff.lang(c("Russian", "Prussian"))
aff.lang(c(Prussian"))
aff.lang(c("Prussian"))
aff.lang(c("Old Prussian"))
aff.lang(c("Old Prussian", "Russian"))
aff.lang(c("Old Prussian", "Russia"))
aff.lang(c("Russia"))
str(glottolog)
library(lingtypology)
country.lang("Adyghe")
country.lang("Russian")
input <- "Russian"
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$countries)
a
unique(a[complete.cases(a)])
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$countries)
a[complete.cases(a)]
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$countries)
a <- NA
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$countries)
input <- "Russian"
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$countries)
i <- 1
a <- c(a, glottolog[tolower(glottolog$lang) == input[i],]$countries)
a
str(glottolog)
[glottolog$languoid == "Russian", 7]
glottolog[glottolog$languoid == "Russian", 7]
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
View(glottolog)
countrydf <- read.csv("forkel_countries.tab", stringsAsFactors = F, sep = "\t", header = F)
View(countrydf)
countrydf <- countrydf[, 1:2]
View(countrydf)
countrydf <- read.csv("forkel_countries.tab", stringsAsFactors = F, sep = ";", header = F)
countrydf[1, 1]
sub("\t", ";", countrydf[1, 1])
for (i in 1:8283) {
countrydf[1, i] <- sub("\t", ";", countrydf[1, i])
}
a <- NA
a[i] <- sub("\t", ";", countrydf[1, i])
for (i in 1:8283) {
countrydf[i, 1] <- sub("\t", ";", countrydf[i, 1])
}
View(countrydf)
View(countrydf)
write.csv(countrydf, "forkel_countries.csv", row.names = F)
countrydf <- read.csv("forkel_countries.csv", sep = ";")
View(countrydf)
countrydf <- read.csv("forkel_countries.csv", sep = ";")
colnames(countrydf) <- c("iso", "countries")
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
glottolog[,-7]
glottolog <- glottolog[,-7]
country <- merge(df, countrydf, by = "iso", all = TRUE)
write.csv2(country, "glottolog.csv", row.names = F)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
View(glottolog)
View(glottolog)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
countrydf <- read.csv("forkel_countries.tab", stringsAsFactors = F, sep = ";", header = F)
countrydf <- read.csv("forkel_countries.csv", sep = ";")
View(countrydf)
colnames(countrydf) <- c("iso", "countries")
country <- merge(df, countrydf, by = "iso", all = TRUE)
View(country)
country <- country[, -c(7, 8)]
View(country)
View(df)
colnames(country)[7]
colnames(country)[7] <- "country"
write.csv2(country, "glottolog.csv", row.names = F)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
View(glottolog)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
devtools::use_data(glottolog, glottolog, overwrite = T)
library(lingtypology)
country.lang("Russian")
library(lingtypology)
country.lang("Russian")
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
View(glottolog)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
devtools::use_data(glottolog, glottolog, overwrite = T)
library(lingtypology)
library(lingtypology)
country.lang("Adyghe")
country.lang(c("Russian", "Adyghe"))
str(glottolog)
library(lingtypology)
area.lang("Adyghe")
area.lang("Aduge")
str(glottolog)
library(lingtypology)
lat.lang("Adyghe")
lat.lang("Russia")
lat.lang("Russian")
str(glottolog)
lang.country <- function(x){
input <- tolower(x)
a <- NA
for (i in 1:length(input)) {
a <- c(a, glottolog[tolower(glottolog$country) == input[i],]$languoid)
}
ret <- unique(a[complete.cases(a)])
if (length(ret) < 1) {
warning('There is no such a country')
} else {
if(length(ret) != length(x))warning('one or more languoid are missed')
ret}}
lang.country("Poland")
library(lingtypology)
lang.country("Poland")
library(lingtypology)
lang.country("Poland")
library(lingtypology)
lang.country("Poland")
library(lingtypology)
lang.country("Poland")
input <- "polish"
i <- 1
a <- c(a, glottolog[grepl(input[i], tolower(glottolog$country)),]$languoid)
a <- NA
a <- c(a, glottolog[grepl(input[i], tolower(glottolog$country)),]$languoid)
a
grepl(input[i], tolower(glottolog$country))
glottolog[grepl(input[i], tolower(glottolog$country)),]
input <- "poland"
a <- NA
i <- 1
input[i]
tolower(glottolog$country)
glottolog[grepl(input[i], tolower(glottolog$country)),]
glottolog[grepl(input[i], tolower(glottolog$country)),]$languoid
library(lingtypology)
lang.country("Poland")
library(lingtypology)
lang.country("Poland")
library(lingtypology)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
devtools::use_data(glottolog, glottolog, overwrite = T)
countrydf <- read.csv("forkel_countries.csv", sep = ";")
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
countrydf <- read.csv("forkel_countries.csv", sep = ";")
View(countrydf)
countrydf <- read.csv("forkel_countries.csv", sep = ";")
View(countrydf)
colnames(countrydf) <- c("iso", "country")
country <- merge(df, countrydf, by = "iso", all = TRUE)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
country <- merge(df, countrydf, by = "iso", all = TRUE)
View(country)
df <- read.csv2("glottolog.csv", stringsAsFactors = F)
df <- df[,-7]
country <- merge(df, countrydf, by = "iso", all = TRUE)
View(country)
country <- country[complete.cases(country$languoid),]
write.csv2(country, "glottolog.csv", row.names = F)
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
devtools::use_data(glottolog, glottolog, overwrite = T)
library(lingtypology)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
devtools::use_data(glottolog, glottolog, overwrite = T)
library(lingtypology)
library(lingtypology)
lang.country("Poland")
lang.country("Netherlands")
aff.lang("Twents")
str(glottolog)
library(lingtypology)
str(glottolog)
country.lang("Russian")
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Scripts/_R/data Glottolog/languoids")
glottolog <- read.csv2("glottolog.csv", stringsAsFactors = F)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/github/lingtypology")
devtools::use_data(glottolog, glottolog, overwrite = T)
library(lingtypology)
country.lang("Russian")
lang.aff("Slavic")
lang.aff("Slavic")
lang.aff("Maya")
lang.aff("Mayan")
str(glottolog)
list  <- c("iso", "lang", "aff", "long,lat", "area", "country")
combn(list, 2)
combn(list, 2)
library(lingtypology)
lang.iso("ady")
lang.iso("rus")
lang.iso("rsl")
library(lingtypology)
library(lingtypology)
lang.country("Netherlands")
aff.lang("Zeeuws")
