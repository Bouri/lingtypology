{
    "collab_server" : "",
    "contents" : "#' Create a map\n#'\n#' Map a set of linguoids and color them by feature\n#'\n#' Takes any vector of linguoids and return a map.\n#' @param languages character vector of linguoids (can be written in lower case)\n#' @param features character vector of features\n#' @param stroke.features additional independent stroke features\n#' @param popup character vector of strings that will appear in pop-up window\n#' @param latitude numeric vector of latitudes\n#' @param longitude numeric vector of longitudes\n#' @param color vector of colors\n#' @param stroke.color vector of stroke colors\n#' @param title of a legend\n#' @param control logical. If FALSE, function doesn't show layer control buttons.\n#' @param legend logical. If FALSE, function doesn't show legend.\n#' @param radius a numeric vector of radii for the circles.\n#' @param ...\tfurther arguments of leaflet package.\n#' @author George Moroz <agricolamz@gmail.com>\n#' @examples\n#' map.feature(c(\"Adyghe\", \"Russian\"))\n#'\n#' ## Map all Slavic languages\n#' map.feature(lang.aff(c(\"Slavic\")))\n#'\n#' ## Color linguoids by feature\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"))\n#' map.feature(df$lang, df$feature)\n#'\n#' ## Adding pop-up\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"),\n#' popup = c(\"Adyghe\", \"Adyghe\", \"Slavic\", \"Slavic\", \"Slavic\"))\n#' map.feature(df$lang, df$feature, df$popup)\n#'\n#' ## Adding title\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"),\n#' popup = c(\"Adyghe\", \"Adyghe\", \"Slavic\", \"Slavic\", \"Slavic\"))\n#' map.feature(df$lang, df$feature, df$popup, title = \"type of a language\")\n#'\n#' ## Add your own coordinates\n#' map.feature(\"Adyghe\", latitude = 43, longitude = 57)\n#'\n#' ## Add you own colors\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"),\n#' popup = c(\"Adyghe\", \"Adyghe\", \"Slavic\", \"Slavic\", \"Slavic\"))\n#' map.feature(df$lang, df$feature, df$popup, color = c(\"green\", \"navy\"))\n#'\n#' ## Remove control buttons\n#' map.feature(lang.aff(\"Sign\"), control = FALSE)\n#'\n#' ## Use strokes for aditional features\n#' map.feature(circassian$language, features = circassian$languoid, stroke.features = circassian$language, latitude = circassian$latitude, longitude = circassian$longitude)\n#' @export\n#' @import leaflet\n#' @import stats\n#' @import grDevices\n#' @import rowr\n\nmap.feature <- function(languages,\n                        features = \"none\",\n                        popup = \"\",\n                        stroke.features = NULL,\n                        latitude = NULL,\n                        longitude = NULL,\n                        color = NULL,\n                        stroke.color = NULL,\n                        title = NULL,\n                        control = TRUE,\n                        legend = TRUE,\n                        radius = 5,\n                        stroke.radius = 9.5,\n                        ...){\n\n  # 23 color set --------------------------------------------------------------\n  mycolors <- c(\"dodgerblue2\",\"#E31A1C\", \"green4\", \"#6A3D9A\", \"#FF7F00\", \"skyblue2\",\"#FB9A99\",  \"palegreen2\", \"#CAB2D6\",  \"#FDBF6F\", \"gray70\", \"khaki2\", \"maroon\",\"orchid1\",\"deeppink1\",\"blue1\",\"steelblue4\", \"darkturquoise\",\"green1\",\"yellow4\",\"yellow3\", \"darkorange4\",\"brown\")\n\n  # creat dataframe ---------------------------------------------------------\n  if (is.null(latitude) & is.null(longitude)) {  # if there are no latitude and longitude\n    mapfeat.df <- data.frame(languages, features,\n                             long = long.lang(languages),\n                             lat = lat.lang(languages),\n                             popup = popup)\n  } else {   # if there are latitude and longitude\n    mapfeat.df <- data.frame(languages, features,\n                             long = longitude,\n                             lat = latitude,\n                             popup = popup)\n  }\n\n  # remove any rows with NAs ------------------------------------------------\n  mapfeat.df <- mapfeat.df[stats::complete.cases(mapfeat.df),]\n\n  # creat link --------------------------------------------------------------\n  mapfeat.df$link <- makelink(as.character(mapfeat.df$languages), popup = mapfeat.df$popup)\n\n  # create a stroke dataframe -----------------------------------------------\n  if(!is.null(stroke.features)){\n    mapfeat.stroke <- rowr::cbind.fill(mapfeat.df[,-2], data.frame(stroke.features))\n    mapfeat.stroke$long <- as.numeric(levels(mapfeat.stroke$long))[mapfeat.stroke$long]\n    mapfeat.stroke$lat <- as.numeric(levels(mapfeat.stroke$lat))[mapfeat.stroke$lat]\n    mapfeat.stroke <- mapfeat.stroke[stats::complete.cases(mapfeat.stroke),]}\n\n  # creata a pallet ---------------------------------------------------------\n  if (is.null(color)) {\n    pal <- leaflet::colorFactor(sample(mycolors, length(unique(mapfeat.df$features)), replace = T),\n                                domain = mapfeat.df$features)\n  } else {\n    pal <- leaflet::colorFactor(color,\n                                domain = mapfeat.df$color)\n  }\n\n  if(!is.null(stroke.features)){\n    if (is.null(stroke.color)) {\n      lev <- nlevels(stroke.features[stats::complete.cases(stroke.features)])\n      strokecolors <- grDevices::gray(lev :0 / lev)\n      stroke.pal <- leaflet::colorFactor(strokecolors,\n                                domain = mapfeat.stroke$stroke.features)\n      rev.stroke.pal <- leaflet::colorFactor(rev(strokecolors),\n                                         domain = mapfeat.stroke$stroke.features)\n      } else {\n        stroke.pal <- leaflet::colorFactor(stroke.color,\n                                           domain = mapfeat.stroke$stroke.features)\n        rev.stroke.pal <- leaflet::colorFactor(rev(stroke.color),\n                                           domain = mapfeat.stroke$stroke.features)\n        }\n    }\n\n# change feature names ----------------------------------------------------\n  levels(mapfeat.df$features) <- paste(names(table(mapfeat.df$features)), \" (\", table(mapfeat.df$features), \")\", sep = \"\")\n\n# map: if there are only one feature -------------------------------------------\n  if (length(table(mapfeat.df$features)) <= 1){\n    if (is.null(color)) {\n      color <- \"blue\"\n    }\n    m <- leaflet::leaflet(mapfeat.df) %>%\n      leaflet::addTiles() %>%\n      leaflet::addCircleMarkers(lng=mapfeat.df$long,\n                                lat=mapfeat.df$lat,\n                                popup= mapfeat.df$link,\n                                stroke = F,\n                                radius = radius,\n                                color = color,\n                                fillOpacity = 1,\n                                group = mapfeat.df$languages)\n    if (control == TRUE) {\n    m <- m %>% leaflet::addLayersControl(overlayGroups = mapfeat.df$languages,\n                                options = layersControlOptions(collapsed = F))\n    }\n\n# map: if there are stroke features ---------------------------------------\n  } else if(!is.null(stroke.features)){\n    m <- leaflet::leaflet(mapfeat.stroke) %>%\n      leaflet::addTiles() %>%\n      leaflet::addCircleMarkers(lng=mapfeat.stroke$long,\n                                lat=mapfeat.stroke$lat,\n                                popup= mapfeat.stroke$link,\n                                stroke = F,\n                                radius = stroke.radius*1.15,\n                                fillOpacity = 1,\n                                color = \"black\") %>%\n      leaflet::addCircleMarkers(lng=mapfeat.stroke$long,\n                                lat=mapfeat.stroke$lat,\n                                popup= mapfeat.stroke$link,\n                                stroke = F,\n                                radius = stroke.radius,\n                                fillOpacity = 1,\n                                color = stroke.pal(mapfeat.stroke$stroke.features),\n                                group = mapfeat.stroke$stroke.features) %>%\n      leaflet::addCircleMarkers(lng=mapfeat.stroke$long,\n                                lat=mapfeat.stroke$lat,\n                                popup= mapfeat.df$link,\n                                stroke = F,\n                                radius = 1.15*radius,\n                                fillOpacity = 1,\n                                color = rev.stroke.pal(mapfeat.stroke$stroke.features),\n                                group = mapfeat.stroke$stroke.features) %>%\n      leaflet::addCircleMarkers(lng=mapfeat.df$long,\n                                lat=mapfeat.df$lat,\n                                popup= mapfeat.df$link,\n                                stroke = F,\n                                radius = radius,\n                                fillOpacity = 0.6,\n                                color = pal(mapfeat.df$features),\n                                group = mapfeat.df$features)\n    if (legend == TRUE) {\n      m <- m %>% leaflet::addLegend(title = title,\n                               position = c(\"topright\"),\n                               pal = pal,\n                               values = mapfeat.df$features,\n                               opacity = 1) %>%\n        leaflet::addLegend(title = \"\",\n                           position = c(\"bottomleft\"),\n                           pal = stroke.pal,\n                           values = mapfeat.stroke$stroke.features,\n                           opacity = 1)\n      }\n    # map: if there are more than one feature -------------------------------------------\n  } else{\n    m <- leaflet::leaflet(mapfeat.df) %>%\n      leaflet::addTiles() %>%\n      leaflet::addCircleMarkers(lng=mapfeat.df$long,\n                                lat=mapfeat.df$lat,\n                                popup= mapfeat.df$link,\n                                stroke = F,\n                                radius = radius,\n                                fillOpacity = 1,\n                                color = pal(mapfeat.df$features),\n                                group = mapfeat.df$features)\n    if (control == TRUE) {\n    m <- m  %>% leaflet::addLayersControl(overlayGroups = mapfeat.df$features,\n                                          options = layersControlOptions(collapsed = F))\n    }\n    if (legend == TRUE) {\n      m <- m  %>% leaflet::addLegend(title = title,\n                                     position = c(\"bottomleft\"),\n                                     pal = pal,\n                                     values = mapfeat.df$features,\n                                     opacity = 1)\n      }\n  }\nm\n}\n",
    "created" : 1482851602051.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1641527270",
    "id" : "2F1E22E5",
    "lastKnownWriteTime" : 1482851720,
    "last_content_update" : 1482851720391,
    "path" : "~/_DATA/OneDrive1/_Work/github/lingtypology/lingtypology/R/map.feature.R",
    "project_path" : "R/map.feature.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}