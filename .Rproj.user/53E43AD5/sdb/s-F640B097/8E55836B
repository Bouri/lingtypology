{
    "collab_server" : "",
    "contents" : "---\ntitle: \"`lingtypology`: easy mapping for Lingustic Typology\"\nauthor: \"George Moroz\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{`lingtypology`: easy mapping for Lingustic Typology}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n## What is lingtypology?\nThe `lingtypology` package connects R with the [Glottolog database (v. 2.7)](http://glottolog.org/) and provides an additional functionality for linguistic typology. The Glottolog database contains a catalogue of the world's languages. This package helps researchers to make linguistic maps, using the philosophy of [the Cross-Linguistic Linked Data project](http://clld.org/), which is creating uniform access to linguistic data across publications. This package is based on the [leaflet package](https://rstudio.github.io/leaflet/), so `lingtypology` is a package for interactive linguistic cartography.\n\nI would like to thank Natalya Tyshkevich and Samira Verhees for reading and correcting this vignette.\n\n## 1. Installation\nGet the stable version from CRAN:\n```{r, eval=FALSE}\ninstall.packages(\"lingtypology\")\n```\n\n… or get the development version from GitHub:\n```{r, eval= F}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"agricolamz/lingtypology\", dependencies = TRUE)\n```\nLoad package:\n```{r}\nlibrary(lingtypology)\n```\n\n## 2. Glottolog functions\nThis package is based on the [Glottolog database (v. 2.7)](http://glottolog.org/), so `lingtypology` has several functions for accessing data from that database. In the Glottolog database, the term [_languoid_](http://glottolog.org/glottolog/glottologinformation) is used to catalogue languages, dialects and language families alike.\n\n### 2.1 Command name's syntax\nMost of the functions in `lingtypology` have the same syntax: **what you need.what you have**. Most of them are based on _languoid name_.\n\n* **aff.lang()** — get affiliation by languoid\n* **area.lang()** — get macro area by languoid\n* **country.lang()** — get country by languoid\n* **iso.lang()** — get ISO 639-3 code by languoid\n* **lat.lang()** — get latitude by languoid\n* **long.lang()** — get longitude by languoid\n\nSome of them help to define a vector of languoids.\n\n* **lang.aff()** — get languoid by affiliation\n* **lang.iso()** — get languoid by ISO 639-3 code\n\nThe most important functionality of ' lingtypology' is the ability to create interactive maps based on features and sets of languoids (see the [the next section](https://github.com/agricolamz/lingtypology/wiki/2.-Creating-maps))\n* **map.feature()**\n\n[Glottolog database (v. 2.7)](http://glottolog.org/) provides 'lingtypology' with  languoid names, ISO codes, genealogical affiliation, macro area, countries and coordinates.\n\n### 2.2 Using base functions\nAll functions introduced in the previous section are regular functions, so they can take the following objects as input:\n\n* a regular string\n```{r}\niso.lang(\"Adyghe\")\nlang.iso(\"ady\")\ncountry.lang(\"Adyghe\")\nlang.aff(\"Abkhaz-Adyge\")\n```\n* a vector of strings\n```{r}\narea.lang(c(\"Adyghe\", \"Aduge\"))\nlang <- c(\"Adyghe\", \"Russian\")\naff.lang(lang)\n```\n*  other functions. For example, lets try to get vector of ISO codes for East Slavic languages\n```{r}\niso.lang(lang.aff(\"East Slavic\"))\n```\nThe behavior of most functions is rather predictable, but the function `country.lang`  has an additional feature. By default this function takes a vector of languages and returns a vector of countries.  But if you set the argument `intersection = TRUE`,  then the function returns a vector of countries where all languoids from the query are spoken.\n```{r}\ncountry.lang(c(\"Udi\", \"Laz\"))\ncountry.lang(c(\"Udi\", \"Laz\"), intersection = TRUE)\n```\n### 2.3 Spell Checker: look carefully at warnings!\nThere are some functions that take country names as input. Unfortunately, some countries have alternative names. In order to save users the trouble of having to figure out the exact name stored in the database (for example  _Ivory Coast_ or _Cote d'Ivoire_), all official country names and standard abbreviations are stored in the database:\n\n```{r}\nlang.country(\"Cape Verde\")\nlang.country(\"Cabo Verde\")\nhead(lang.country(\"UK\"))\n```\nAll functions which take a vector of languoids are enriched with a kind of a spell checker. If a languoid from a query is absent in the database, functions return a warning message containing a set of candidates with the minimal Levenshtein distance to the languoid from the query.\n```{r}\naff.lang(\"Adyge\")\n```\n\n### 2.4 Changes in the glottolog database\nUnfortunately, the [Glottolog database (v. 2.7)](http://glottolog.org/) is not perfect, so some changes had to be made:\n\n* Added some Dargwa languages: Chirag, Cudaxar, Itsari, Kajtak, Kubachi, Tanti, Mehweb. Dargwa is still present in the database as an individual languoid, so one can use Dargwa or any Dargwa language listed above. (07.09.2016)\n* Tabassaran is renamed Tabasaran (07.09.2016)\n* Added coordinates to Silesian and Slavomolisano (11.09.2016)\n* North Azerbaijani is renamed Azerbaijani. Added some Dargwa languages: Amuzgi-Shiri, Gapshima, North-Dargwa, Verhnevurkunskij. Added some Avar dialects: Avar (Andalal), Avar (Antsukh), Avar (Batlukh), Avar (Gid), Avar (Karah), Avar (Karata), Avar (Zakatal)  (11.12.2016)\n* Sauk (Trans New Guinea) is renamed Ma Manda. (27.12.2016)\n\n## 3. Map features with `map.feature`\n### 3.1 Base map\nThe most important part of the `lingtypology` package is the function `map.feature`. This function allows a user to produce maps similar to known projects within [the Cross-Linguistic Linked Data philosophy](http://clld.org/), such as [WALS](http://wals.info/) and [Glottolog](http://glottolog.org/):\n```{r, fig.width=6.2}\nmap.feature(c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"))\n```\n\nAs shown in the picture above, this function generates an interactive Leaflet map with a control box that allows users to toggle the visibility of any group of points on the map. All specific points on the map have a pop-up box that appears when markers are clicked (more about editing pop-up boxes see [below](https://github.com/agricolamz/lingtypology/wiki/Map-my-features-with-map.feature()#set-pop-ups)). By default, they contain languoid names linked to the glottolog site.\n\n### 3.2 Set features\nThe goal of this package is to allow typologists to map language types. A list of languoids and correspondent features can be stored in a `data.frame` as follows:\n```{r}\ndf <- data.frame(language = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n                 features = c(\"polysynthetic\", \"polysynthetic\", \"fusional\", \"fusional\", \"fusional\"))\ndf\n```\nNow we can draw a map:\n```{r, fig.width=6.2}\nmap.feature(languages = df$language, features = df$features)\n```\n\nSince colors are chosen randomly by default, it is better to use the function `set.seed` to get reproducible color \npalette (or choose colors by yourself, see section 3.5):\n```{r, fig.width=6.2}\nset.seed(40)\nmap.feature(languages = df$language, features = df$features)\n```\n\n\nLike in most R functions, it is not necessary to name all arguments, so the same result can be obtained by:\n```{r, fig.width=6.2}\nset.seed(40)\nmap.feature(df$language, df$features)\n```\nAs shown in the picture above, all points are grouped by feature, colored and counted. As before, a pop-up box appears when markers are clicked. A control feature allows users to toggle the visibility of points grouped by feature.\n\n### 3.3 Set pop-up boxes\nSometimes it is a good idea to add some additional information to pop-up boxes, e.g. language affiliation,  references or even examples. In order to do so, first of all we need to create an extra vector of strings in our dataframe:\n```{r, fig.width=6.2}\ndf$popup <- aff.lang(df$language)\n```\nThe function `aff.lang()`  creates a vector of genealogical affiliations that can be easily mapped: \n```{r, fig.width=6.2}\nset.seed(40)\nmap.feature(languages = df$language, features = df$features, popup = df$popup)\n```\n\nLike before, it is not necessary to name all arguments, so the same result can be obtained by this:\n```{r, fig.width=6.2}\nset.seed(40)\nmap.feature(df$language, df$features, df$popup)\n```\nPop-up strings can contain HTML tags, so it is easy to insert a link, a couple of lines or a table. Here is how pop-up boxes can demonstrate language examples:\n```{r, fig.width=6.2}\n# change a df$popup vector\ndf$popup <- c (\"sɐ s-ɐ-k'ʷɐ<br> 1sg 1sg.abs-dyn-go<br>'I go'\",\n               \"sɐ s-o-k'ʷɐ<br> 1sg 1sg.abs-dyn-go<br>'I go'\",\n               \"id-ę<br> go-1sg.npst<br> 'I go'\",\n               \"ya id-u<br> 1sg go-1sg.npst <br> 'I go'\",\n               \"id-a<br> go-1sg.prs<br> 'I go'\")\n# create a map\nset.seed(40)\nmap.feature(df$language, df$features, df$popup)\n```\n\n### 3.4 Set coordinates\nUsers can set their own coordinates using the arguments `latitude` and `longitude`. I will illustrate this with the dataset `circassian` built into the `lingtypology` package. This dataset comes from fieldwork collected during several expeditions in the period 2011-2016 and contains a list of Circassian villages:\n```{r, fig.width=6.2}\nset.seed(7)\nmap.feature(languages = circassian$language,\n            features = circassian$languoid,\n            popup = circassian$village,\n            latitude = circassian$latitude,\n            longitude = circassian$longitude)\n```\n\n### 3.5 Set colors\nBy default colors are chosen randomly, but user can set their own colors using argument `color`:\n```{r, fig.width=6.2}\ndf <- data.frame(language = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n                 features = c(\"polysynthetic\", \"polysynthetic\", \"fusional\", \"fusional\", \"fusional\"))\nmap.feature(languages = df$language,\n            features = df$features,\n            color = c(\"yellowgreen\", \"navy\"))\n```\n\n### 3.6 Set control box\nThe automatically generated control box that allows users to toggle the visibility of points and features can become inconvenient when there is a large amount of features on the map. To disable it there is an argument  `control` in the `map.feature` function:\n\n```{r, fig.width=6.2}\nmap.feature(lang.aff(\"Sign Language\"), control = FALSE)\n```\n\nTo disable the automatically generated legend there is an argument  `legend` in the `map.feature` function that can be set to `FALSE`.\n\n### 3.7 Set an additional set of features using strokes\nThe `map.feature` function has an additional argument `stroke.features`. Using this argument it becomes possible to show two independent sets of features on one map. By default strokes are colored in grey (so for two levels it will be black and white, for three --- black, grey, white end so on), but users can set their own colors using the argument `stroke.color`:\n```{r, fig.width=6.2}\nset.seed(7)\nmap.feature(circassian$language,\n            features = circassian$languoid,\n            stroke.features = circassian$language,\n            latitude = circassian$latitude,\n            longitude = circassian$longitude,\n            control = FALSE)\n```\n\nIt is important to note that `stroke.features` can work with `NA` values. The function won't plot anything if there is an `NA` value. Let's set a language value to `NA` in all Baksan villages from the `circassian` dataset\n```{r, message= F, fig.width=6.2}\nlibrary(dplyr)\n# create newfeature variable\nnewfeature <- circassian\n# set language feature of the Baksan villages to NA and reduce newfeature from dataframe to vector\nnewfeature %>% \n  mutate(language = replace(language, languoid == \"Baksan\", NA)) %>% \n  select(language) %>% \n  unlist() ->\n  newfeature\n# create a map\nset.seed(7)\nmap.feature(circassian$language,\n            features = circassian$languoid, \n            latitude = circassian$latitude,\n            longitude = circassian$longitude,\n            stroke.features = newfeature,\n            control = FALSE)\n```\n\n### 3.8 Set radii and an opacity feature\nAll markers have their own radius and opacity, so it can be set by users. Just use arguments `radius`, `stroke.radius`, `opacity` and `stroke.opacity`:\n```{r, fig.width=6.2}\nset.seed(7)\nmap.feature(circassian$language,\n            features = circassian$languoid,\n            stroke.features = circassian$language,\n            latitude = circassian$latitude,\n            longitude = circassian$longitude,\n            control = FALSE,\n            radius = 7, stroke.radius = 13)\n\nset.seed(7)\nmap.feature(circassian$language,\n            features = circassian$languoid,\n            stroke.features = circassian$language,\n            latitude = circassian$latitude,\n            longitude = circassian$longitude,\n            control = FALSE,\n            opacity = 0.7, stroke.opacity = 0.6)\n```\n\n### 3.9 Customizing legends\nBy default legend appear in the left bottom corner. If there are stroke features, two legends are generated. There are additional arguments that control appearence and title of the legends.\n```{r, fig.width=6.2}\nset.seed(7)\nmap.feature(circassian$language,\n            features = circassian$languoid,\n            stroke.features = circassian$language,\n            latitude = circassian$latitude,\n            longitude = circassian$longitude,\n            control = FALSE,\n            legend = FALSE, stroke.legend = TRUE)\n\nset.seed(7)\nmap.feature(circassian$language,\n            features = circassian$languoid,\n            stroke.features = circassian$language,\n            latitude = circassian$latitude,\n            longitude = circassian$longitude,\n            control = FALSE,\n            title = \"Circassian dialects\", stroke.title = \"Languages\")\n```\n\n### 3.10 Set layouts and other leaflet features\nSince the `lingtypology` package is based on the [`leaflet` package](https://rstudio.github.io/leaflet/), it is possible to add some map features from that package using the magrittr pipe operator (`%>%`). For example many popular base-maps can be added using the `addProviderTiles()` function from the [`leaflet` package](https://rstudio.github.io/leaflet/) ([here](https://leaflet-extras.github.io/leaflet-providers/preview/index.html) is the complete set of base-maps).\n```{r, fig.width=6.2}\nlibrary(leaflet) # for correct work ofaddProviderTiles()\ndf <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n   feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"),\n   popup = c(\"Adyghe\", \"Adyghe\", \"Slavic\", \"Slavic\", \"Slavic\"))\nset.seed(11)\nmap.feature(df$lang, df$feature, df$popup) %>% \naddProviderTiles(\"Stamen.Toner\")\n```\n",
    "created" : 1483160167338.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1449927275",
    "id" : "8E55836B",
    "lastKnownWriteTime" : 1483164745,
    "last_content_update" : 1483164745318,
    "path" : "~/_DATA/OneDrive1/_Work/github/lingtypology/lingtypology/vignettes/lingtypology.Rmd",
    "project_path" : "vignettes/lingtypology.Rmd",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}