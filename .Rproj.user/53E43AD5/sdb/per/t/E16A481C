{
    "collab_server" : "",
    "contents" : "#' Map a set of linguoids and color them by feature\n#'\n#' Takes any vector of linguoids and return a map.\n#' @param languages character vector of linguoids (can be written in lower case)\n#' @param features character vector of features\n#' @param stroke.features additional independent stroke features\n#' @param popup character vector of strings that will appear in pop-up window\n#' @param latitude numeric vector of latitudes\n#' @param longitude numeric vector of longitudes\n#' @param color vector of colors\n#' @param stroke.color vector of stroke colors\n#' @param title of a legend\n#' @param control logical. If FALSE, function doesn't show layer control buttons.\n#' @param ...\tfurther arguments of leaflet package.\n#' @author George Moroz <agricolamz@gmail.com>\n#' @examples\n#' map.feature(c(\"Adyghe\", \"Russian\"))\n#'\n#' ## Map all Slavic languages\n#' map.feature(lang.aff(c(\"Slavic\")))\n#'\n#' ## Color linguoids by feature\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"))\n#' map.feature(df$lang, df$feature)\n#'\n#' ## Adding pop-up\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"),\n#' popup = c(\"Adyghe\", \"Adyghe\", \"Slavic\", \"Slavic\", \"Slavic\"))\n#' map.feature(df$lang, df$feature, df$popup)\n#'\n#' ## Adding title\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"),\n#' popup = c(\"Adyghe\", \"Adyghe\", \"Slavic\", \"Slavic\", \"Slavic\"))\n#' map.feature(df$lang, df$feature, df$popup, title = \"type of a language\")\n#'\n#' ## Add your own coordinates\n#' map.feature(\"Adyghe\", latitude = 43, longitude = 57)\n#'\n#' ## Add you own colors\n#' df <- data.frame(lang = c(\"Adyghe\", \"Kabardian\", \"Polish\", \"Russian\", \"Bulgarian\"),\n#' feature = c(\"polysynthetic\", \"polysynthetic\", \"fusion\", \"fusion\", \"fusion\"),\n#' popup = c(\"Adyghe\", \"Adyghe\", \"Slavic\", \"Slavic\", \"Slavic\"))\n#' map.feature(df$lang, df$feature, df$popup, color = c(\"green\", \"navy\"))\n#'\n#' ## Remove control buttons\n#' map.feature(lang.aff(\"Sign\"), control = FALSE)\n#'\n#' ## Use strokes for aditional features\n#' map.feature(df$language, features = df$languoid, stroke.features = df$language, latitude = df$latitude, longitude = df$longitude, control = F)\n#' @export\n#' @import leaflet\n#' @import stats\n#' @import grDevices\n\nmap.feature <- function(languages,\n                        features = \"none\",\n                        stroke.features = NULL,\n                        popup = \"\",\n                        latitude = NULL,\n                        longitude = NULL,\n                        color = NULL,\n                        stroke.color = NULL,\n                        title = NULL,\n                        control = TRUE,\n                        ...){\n\n  # 23 color set --------------------------------------------------------------\n  mycolors <- c(\"dodgerblue2\",\"#E31A1C\", \"green4\", \"#6A3D9A\", \"#FF7F00\", \"skyblue2\",\"#FB9A99\",  \"palegreen2\", \"#CAB2D6\",  \"#FDBF6F\", \"gray70\", \"khaki2\", \"maroon\",\"orchid1\",\"deeppink1\",\"blue1\",\"steelblue4\", \"darkturquoise\",\"green1\",\"yellow4\",\"yellow3\", \"darkorange4\",\"brown\")\n\n  # creat dataframe ---------------------------------------------------------\n  if (is.null(latitude) & is.null(longitude)) {  # if there are no latitude and longitude\n    mapfeat.df <- data.frame(languages, features,\n                             long = long.lang(languages),\n                             lat = lat.lang(languages),\n                             popup = popup)\n  } else {   # if there are latitude and longitude\n    mapfeat.df <- data.frame(languages, features,\n                             long = longitude,\n                             lat = latitude,\n                             popup = popup)\n  }\n\n  ifelse(is.null(stroke.features),\n         mapfeat.df,\n         mapfeat.df$stroke.features <- stroke.features)\n\n\n  # creat link --------------------------------------------------------------\n  mapfeat.df$link <- makelink(as.character(mapfeat.df$languages), popup = mapfeat.df$popup)\n\n  # remove any rows with NAs ------------------------------------------------\n  mapfeat.df <- mapfeat.df[stats::complete.cases(mapfeat.df),]\n\n  # creata a pallet ---------------------------------------------------------\n  if (is.null(color)) {\n    pal <- leaflet::colorFactor(sample(mycolors, length(unique(mapfeat.df$features))),\n                                domain = mapfeat.df$features)\n  } else {\n    pal <- leaflet::colorFactor(color,\n                                domain = mapfeat.df$features)\n  }\n\n  if(!is.null(stroke.features)){\n    mystrokecolors <- grDevices::gray(length(stroke.features):0 / length(stroke.features))\n    if (is.null(stroke.color)) {\n      stroke.pal <- leaflet::colorFactor(mystrokecolors,\n                                domain = mapfeat.df$stroke.features)\n      } else {\n        stroke.pal <- leaflet::colorFactor(stroke.color,\n                                           domain = mapfeat.df$stroke.features)\n        }\n    }\n\n  # change feature names ----------------------------------------------------\n  levels(mapfeat.df$features) <- paste(names(table(mapfeat.df$features)), \" (\", table(mapfeat.df$features), \")\", sep = \"\")\n\n  # map: if there are only one feature -------------------------------------------\n  if (length(table(mapfeat.df$features)) <= 1){\n    if (is.null(color)) {\n      color <- \"blue\"\n    }\n    m <- leaflet::leaflet(mapfeat.df) %>%\n      leaflet::addTiles() %>%\n      leaflet::addCircleMarkers(lng=mapfeat.df$long,\n                                lat=mapfeat.df$lat,\n                                popup= mapfeat.df$link,\n                                stroke = T,\n                                radius = 5,\n                                color = color,\n                                fillOpacity = 1,\n                                group = mapfeat.df$languages)\n    if (control == TRUE) {\n    m <- m %>% leaflet::addLayersControl(overlayGroups = mapfeat.df$languages,\n                                options = layersControlOptions(collapsed = F))\n    }\n\n# map: if there are stroke features ---------------------------------------\n  } else if(!is.null(stroke.features)){\n    m <- leaflet::leaflet(mapfeat.df) %>%\n      leaflet::addTiles() %>%\n      leaflet::addCircleMarkers(lng=mapfeat.df$long,\n                                lat=mapfeat.df$lat,\n                                popup= mapfeat.df$link,\n                                stroke = F,\n                                radius = 9.5,\n                                fillOpacity = 1,\n                                color = stroke.pal(mapfeat.df$stroke.features),\n                                group = mapfeat.df$stroke.features) %>%\n      leaflet::addCircleMarkers(lng=mapfeat.df$long,\n                                lat=mapfeat.df$lat,\n                                popup= mapfeat.df$link,\n                                stroke = F,\n                                radius = 5,\n                                fillOpacity = 0.6,\n                                color = pal(mapfeat.df$features),\n                                group = mapfeat.df$features) %>%\n      leaflet::addLegend(title = title,\n                         position = c(\"bottomleft\"),\n                         pal = pal,\n                         values = mapfeat.df$features,\n                         opacity = 1) %>%\n      leaflet::addLegend(title = \"\",\n                         position = c(\"bottomleft\"),\n                         pal = stroke.pal,\n                         values = mapfeat.df$stroke.features,\n                         opacity = 1)\n    if (control == TRUE) {\n      m <- m  %>% leaflet::addLayersControl(overlayGroups = mapfeat.df$features,\n                                            options = layersControlOptions(collapsed = F))\n    }\n    # map: if there are more than one feature -------------------------------------------\n  } else{\n    m <- leaflet::leaflet(mapfeat.df) %>%\n      leaflet::addTiles() %>%\n      leaflet::addCircleMarkers(lng=mapfeat.df$long,\n                                lat=mapfeat.df$lat,\n                                popup= mapfeat.df$link,\n                                stroke = T,\n                                radius = 5,\n                                fillOpacity = 1,\n                                color = pal(mapfeat.df$features),\n                                group = mapfeat.df$features) %>%\n      leaflet::addLegend(title = title,\n                         position = c(\"bottomleft\"),\n                         pal = pal,\n                         values = mapfeat.df$features,\n                         opacity = 1)\n    if (control == TRUE) {\n    m <- m  %>% leaflet::addLayersControl(overlayGroups = mapfeat.df$features,\n                                          options = layersControlOptions(collapsed = F))\n    }\n  }\nm\n}\n",
    "created" : 1480068414940.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1081650383",
    "id" : "E16A481C",
    "lastKnownWriteTime" : 1480072386,
    "last_content_update" : 1480072386251,
    "path" : "~/_DATA/OneDrive1/_Work/github/lingtypology/lingtypology/R/map.feature.R",
    "project_path" : "R/map.feature.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}